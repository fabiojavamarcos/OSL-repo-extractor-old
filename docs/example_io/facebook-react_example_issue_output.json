{
    "1": {
        "body": "This is not blocking the initial launch, so feel free to put it on the back-burner for now.The Jasmine test harness still runs in the parent window and reports to PhantomJS via `window.callPhantom`, but each test `<iframe>` has its own copy of `react-test.js` and each individual test module is required in the global context of a separate `<iframe>`.This gives us a significant approximation of the benefits of mocking, at least in terms of isolating tests from one another.cr @jeffmo @zpao",
        "closed": "06/03/13, 05:58:02 PM",
        "num_comments": 4,
        "title": "Run each test in its own <iframe>",
        "userid": "5750",
        "userlogin": "benjamn",
        "pr": {
            "pr_merged": true,
            "commit": {
                "commit_author_name": "Ben Newman",
                "committer": "Ben Newman",
                "commit_date": "06/03/13, 05:18:39 PM",
                "commit_files": {
                    "file_list": [
                        "src/test/all.js"
                    ],
                    "additions": 35,
                    "changes": 43,
                    "patch_text": "@@ -12,14 +12,41 @@ if (!Fp.bind) {   Fp.bind = function(context) {     var func = this;     var args = slice.call(arguments, 1);-    return args.length > 0 ? function() {-      return func.apply(-        context || this,-        args.concat(slice.call(arguments))-      );-    } : function() {-      return func.apply(context || this, arguments);-    };+    var bound;++    if (func.prototype) {+      if (args.length > 0) {+        bound = function() {+          return func.apply(+            !(this instanceof func) && context || this,+            args.concat(slice.call(arguments))+          );+        };+      } else {+        bound = function() {+          return func.apply(+            !(this instanceof func) && context || this,+            arguments+          );+        };+      }++      bound.prototype = Object.create(func.prototype);++    } else if (args.length > 0) {+      bound = function() {+        return func.apply(+          context || this,+          args.concat(slice.call(arguments))+        );+      };+    } else {+      bound = function() {+        return func.apply(context || this, arguments);+      };+    }++    return bound;   }; } ,",
                    "removals": 8,
                    "status": "\"modified, \""
                },
                "commit_message": "Implement constructor-aware binding per @zpao's request.When the function to be bound does not have a prototype, ignore the constructor case.",
                "commit_sha": "603c9ef6a8d70d3cf29ee9d0a9d7969abce48ac4"
            }
        },
        "comments": {
            "0": {
                "body": "A++, merge away when you're ready",
                "userid": "8445",
                "userlogin": "zpao"
            },
            "1": {
                "body": "I like this much better than our current test system.But isn't it masking the fact that dumpCache() doesn't work consistently between our phantom and jstest test runners? I think that's why we had the original issue where the reactRoot count was not reset when running in phantom. Doesn't that mean that some tests will pass in phantom (because they're better isolated) and fail in jstest?",
                "userid": "239742",
                "userlogin": "petehunt"
            },
            "2": {
                "body": "@petehunt good question. I believe jstest actually creates a new window environment for each test, which would mean that the `<iframe>` strategy is as close as we can get in a real browser: https://phabricator.fb.com/diffusion/E/browse/tfb/trunk/www/scripts/third_party/jstest/runner/run-single-jstest.jsSo I think/hope that we will have fewer disagreements between phantom and jstest.It's still masking the fact that `dumpCache` doesn't work the same way, yes. But making `dumpCache` work would require rewriting the module system that Browserify uses. That's not out of the question by any means, but right now it's nice to be testing the same imperfect module system that we ship in production Browserify bundles.cc @jeffmo who might know better",
                "userid": "5750",
                "userlogin": "benjamn"
            },
            "3": {
                "body": ":+1:",
                "userid": "239742",
                "userlogin": "petehunt"
            }
        }
    },
    "2": {
        "body": "The buttons on the index were pointing at wrong paths.",
        "closed": "05/29/13, 08:32:25 PM",
        "num_comments": 1,
        "title": "[docs] Fix button links on bottom of home",
        "userid": "2266187",
        "userlogin": "paulshen",
        "pr": {
            "pr_merged": true,
            "commit": {
                "commit_author_name": "Paul Shen",
                "committer": "Paul Shen",
                "commit_date": "05/29/13, 08:30:50 PM",
                "commit_files": {
                    "file_list": [
                        "docs/index.md"
                    ],
                    "additions": 2,
                    "changes": 4,
                    "patch_text": "@@ -78,7 +78,7 @@ id: home <hr class=\"home-divider\" /> <section class=\"home-bottom-section\">   <div class=\"buttons-unit\">-    <a href=\"/getting-started.html\" class=\"button\">Get Started</a>-    <a href=\"/download.html\" class=\"button\">Download React v{{site.react_version}}</a>+    <a href=\"docs/getting-started.html\" class=\"button\">Get Started</a>+    <a href=\"downloads.html\" class=\"button\">Download React v{{site.react_version}}</a>   </div> </section>,",
                    "removals": 2,
                    "status": "\"modified, \""
                },
                "commit_message": "[docs] Fix button links on bottom of home",
                "commit_sha": "c5b4fe9e88a9a3b43cfd9b7e5383096bd9e213ef"
            }
        },
        "comments": {
            "0": {
                "body": "Looks good, thanks for fixing!",
                "userid": "55161",
                "userlogin": "yungsters"
            }
        }
    },
    "3": {
        "body": "Nan",
        "closed": "05/29/13, 08:39:35 PM",
        "num_comments": 0,
        "title": "[docs] Fix couple minor typos/spelling",
        "userid": "2266187",
        "userlogin": "paulshen",
        "pr": {
            "pr_merged": true,
            "commit": {
                "commit_author_name": "Paul Shen",
                "committer": "Paul Shen",
                "commit_date": "05/29/13, 08:37:07 PM",
                "commit_files": {
                    "file_list": [
                        "docs/_js/examples/timer.js",
                        "docs/docs/syntax.md"
                    ],
                    "additions": 2,
                    "changes": 4,
                    "patch_text": "@@ -17,7 +17,7 @@ var Timer = React.createClass({\\n\\   render: function() {\\n\\     return (\\n\\       <div>\\n\\-        {'Seconds Ellapsed: ' + this.state.secondsElapsed}\\n\\+        {'Seconds Elapsed: ' + this.state.secondsElapsed}\\n\\       </div>\\n\\     );\\n\\   }\\n\\, @@ -10,7 +10,7 @@ next: component-basics.html JSX is a JavaScript XML syntax extension recommended (but not required) for use with React. -JSX makes code that deeply nested React components more readable, and writing it+JSX makes code that deeply nests React components more readable, and writing it feels like writing HTML. React documentation examples make use of JSX.  ## The Transform,",
                    "removals": 2,
                    "status": "\"modified, modified, \""
                },
                "commit_message": "[docs] Fix couple minor typos/spelling",
                "commit_sha": "ef6754bce52fd12759f9a8c3c09a9003a4e5f49a"
            }
        },
        "comments": {}
    },
    "4": {
        "body": "Added some additional examples to explain common usage patterns for custom events.",
        "closed": "05/29/13, 08:50:15 PM",
        "num_comments": 0,
        "title": "[docs] Improve \"Event Handling\" documentation.",
        "userid": "55161",
        "userlogin": "yungsters",
        "pr": {
            "pr_merged": true,
            "commit": {
                "commit_author_name": "yungsters",
                "committer": "yungsters",
                "commit_date": "05/29/13, 08:48:12 PM",
                "commit_files": {
                    "file_list": [
                        "docs/docs/event-handling.md"
                    ],
                    "additions": 100,
                    "changes": 100,
                    "patch_text": "@@ -122,3 +122,103 @@ var handleToggle = function(enabled) { }; var myToggleLink = <ToggleLink onToggle={handleToggle} />; ```++### Common Patterns++With React your event handlers should be quite small. Large event handlers may+be symptomatic of code that should be moved into helpers or into `render()`.+Here are some common usage patterns for event handlers.++#### Updating State++The most common thing to do in response to a user action is to call+`this.setState()` to update the component's state, which will in turn trigger+an update to the rendered component.++#### Server Requests++Many event handlers will issue a server request to read or write some data in+response to an event. The response handler for the request will often call+`this.setState()`.++#### Invoke a Callback++Your component will often be a small, reusable building block that does not know+how to respond to a user action. In these situations, we delegate the+responsibility to the owner by exposing a handler on `this.props`. This is what+the `ToggleLink` example above is doing.++#### Inter-component Communication++A common scenario involves communicating to **Component A** that a user action+has occurred on **Component B**. To solve this problem, a common parent to+both components should listen for the event on **Component B**, update its+internal state, and pass that data into **Component A**.++For example, say we have two components: **Clicker**, a component that fires an+`onCountChange` custom event, and **ClickCountLabel**, a component that displays+the number of clicks that have happened:++```javascript+var Clicker = React.createClass({+  getInitialState: function() {+    return {count: 0};+  },+  render: function() {+    return <span onClick={this.handleClick}>Click me!</span>;+  },+  handleClick: React.autoBind(function() {+    this.setState({count: this.state.count + 1});+    if (this.props.onCountChange) {+      this.props.onCountChange(this.state.count);+    }+  })+});++var ClickCountLabel = React.createClass({+  render: function() {+    return <p>You have clicked <strong>{this.props.count}</strong> times.</p>;+  }+});++var ClickApp = React.createClass({+  render: function() {+    var count = 0;+    return (+      <div>+        <Clicker onCountChange={this.handleCountChange} />+        <ClickCountLabel count={count} />+      </div>+    );+  },+  handleCountChange: React.autoBind(function(count) {+    // Somehow update `count`.+  })+});+```++In order to communicate the click count from `Clicker` to `ClickCountLabel`, we+modify `ClickApp` to maintain state that will be passed into `ClickCountLabel`:++```javascript{2-4,6,15}+var ClickApp = React.createClass({+  getInitialState: function() {+    return {count: 0};+  },+  render: function() {+    var count = this.state.count;+    return (+      <div>+        <Clicker onCountChange={this.handleCountChange} />+        <ClickCountLabel count={count} />+      </div>+    );+  },+  handleCountChange: React.autoBind(function(count) {+    this.setState({count: count});+  })+});+```++Now when `Clicker` fires the `onCountChange` event, the `ClickCountLabel` will+get updated!,",
                    "removals": 0,
                    "status": "\"modified, \""
                },
                "commit_message": "[docs] Improve \"Event Handling\" documentation.Added some additional examples to explain common usage patterns for custom events.",
                "commit_sha": "99088b38d3554105d6ea8694c38c2e172227e804"
            }
        },
        "comments": {}
    },
    "5": {
        "body": "Nan",
        "closed": "05/29/13, 08:53:10 PM",
        "num_comments": 0,
        "title": "Fix links in root README.md",
        "userid": "706406",
        "userlogin": "jeffreylin",
        "pr": {
            "pr_merged": true,
            "commit": {
                "commit_author_name": "Jeffrey Lin",
                "committer": "Jeffrey Lin",
                "commit_date": "05/29/13, 08:51:49 PM",
                "commit_files": {
                    "file_list": [
                        "README.md"
                    ],
                    "additions": 2,
                    "changes": 4,
                    "patch_text": "@@ -6,7 +6,7 @@ React is a JavaScript library for building user interfaces. * **Efficient:** React minimizes interactions with the DOM by using a mock representation of the DOM. * **Flexible:** React works with the libraries and frameworks that you already know. -[Learn how to use React in your own project.](http://facebook.github.io/docs/getting-started.html)+[Learn how to use React in your own project.](http://facebook.github.io/react/docs/getting-started.html)  ## Examples @@ -41,7 +41,7 @@ The fastest way to get started is to serve JavaScript from the CDN: <script src=\"http://fb.me/JSXTransformer-0.3.0.js\"></script> ``` -We've also built a [starter kit](#) which might be useful if this is your first time using React. It includes a webpage with an example of using React with live code.+We've also built a [starter kit](http://facebook.github.io/react/downloads/react-0.3.0.zip) which might be useful if this is your first time using React. It includes a webpage with an example of using React with live code.  If you'd like to use [bower](http://bower.io), it's as easy as: ,",
                    "removals": 2,
                    "status": "\"modified, \""
                },
                "commit_message": "Fix links in root README.md",
                "commit_sha": "a341f778ae277bf4636c75ceaadf83f203388b26"
            }
        },
        "comments": {}
    },
    "6": {
        "body": "Nan",
        "closed": "05/29/13, 08:54:16 PM",
        "num_comments": 0,
        "title": "[docs] Clean up formatting on /api.html",
        "userid": "2266187",
        "userlogin": "paulshen",
        "pr": {
            "pr_merged": true,
            "commit": {
                "commit_author_name": "Paul Shen",
                "committer": "Paul Shen",
                "commit_date": "05/29/13, 08:53:08 PM",
                "commit_files": {
                    "file_list": [
                        "docs/docs/api.md"
                    ],
                    "additions": 69,
                    "changes": 92,
                    "patch_text": "@@ -9,15 +9,23 @@ prev: advanced-components.html  `React` is the entry point to the React framework. If you're using one of the prebuilt packages it's available as a global; if you're using CommonJS modules you can `require()` it. -### DOM+#### React.DOM  `React.DOM` provides all of the standard HTML tags needed to build a React app. You generally don't use it directly; instead, just include it as part of the `/** @jsx React.DOM */` docblock. -### initializeTouchEvents(boolean shouldUseTouch)+#### React.initializeTouchEvents++```javascript+initializeTouchEvents(boolean shouldUseTouch)+```  Configure React's event system to handle touch events on mobile devices. -### function autoBind(function method)+#### React.autoBind++```javascript+function autoBind(function method)+```  Marks the provided function to be automatically bound to each React component instance created. This allows React components to define automatically bound methods and ensure that when called they will always reference their current instance. @@ -35,11 +43,19 @@ React.createClass({ }); ``` -### function createClass(object specification)+#### React.createClass++```javascript+function createClass(object specification)+```  Creates a component given a specification. A component implements a `render` method which returns a single child. That child may have an arbitrarily deep child structure. One thing that makes components different than a standard prototypal classes is that you don't need to call new on them. They are convenience wrappers that construct backing instances (via new) for you. -### ReactComponent renderComponent(ReactComponent container, DOMElement mountPoint)+#### React.renderComponent++```javascript+ReactComponent renderComponent(ReactComponent container, DOMElement mountPoint)+```  Renders a React component into the DOM in the supplied `container`. @@ -55,50 +71,80 @@ If you find that you need the underlying browser event for some reason, simply u  Component classses created by `createClass()` return instances of `ReactComponent` when called. Most of the time when you're using React you're either creating or consuming `ReactComponent`s. -### DOMElement getDOMNode()+#### getDOMNode++```javascript+DOMElement getDOMNode()+```  If this component has been mounted into the DOM, this returns the corresponding native browser DOM element. This method is useful for reading values out of the DOM, such as form field values and performing DOM measurements. -### setProps(object nextProps)+#### setProps++```javascript+setProps(object nextProps)+```  When you're integrating with an external JavaScript application you may want to signal a change to a React component rendered with `renderComponent()`. Simply call `setProps()` to change its properties and trigger a re-render.  **Note:** This method can only be called on a root-level component. That is, it's only available on the component passed directly to `renderComponent()` and none of its children. If you're inclined to use `setProps()` on a child component, instead take advantage of reactive updates and pass the new prop to the child component when it's created in `render()`. -### replaceProps(object nextProps)+#### replaceProps++```javascript+replaceProps(object nextProps)+```  Like `setProps()` but deletes any pre-existing props that are not in nextProps. -### ReactComponent transferPropsTo(ReactComponent targetComponent)+#### transferPropsTo++```javascript+ReactComponent transferPropsTo(ReactComponent targetComponent)+```  Transfer properties from this component to a target component that have not already been set on the target component. This is usually used to pass down properties to the returned root component. `targetComponent`, now updated with some new props is returned as a convenience. -### setState(object nextState)+#### setState++```javascript+setState(object nextState)+```  Merges nextState with the current state. This is the primary method you use to trigger UI updates from event handlers and server request callbacks.  **Note:** *NEVER* mutate `this.state` directly. As calling `setState()` afterwards may replace the mutation you made. Treat `this.state` as if it were immutable.  **Note:** `setState()` does not immediately mutate `this.state` but creates a pending state transition. Accessing `this.state` after calling this method can potentially return the existing value. -### replaceState(object nextState)+#### replaceState++```javascript+replaceState(object nextState)+```  Like `setState()` but deletes any pre-existing state keys that are not in nextState. -### forceUpdate()+#### forceUpdate()++```javascript+forceUpdate()+```  If your `render()` method reads from something other than `this.props` or `this.state` you'll need to tell React when it needs to re-run `render()`. Use `forceUpdate()` to cause React to automatically re-render. This will cause `render()` to be called on the component and all of its children but React will only update the DOM if the markup changes.  Normally you should try to avoid all uses of `forceUpdate()` and only read from `this.props` and `this.state` in `render()`. This makes your application much simpler and more efficient. -### object getInitialState()-### componentWillMount()-### componentDidMount(DOMElement domNode)-### componentWillReceiveProps(object nextProps)-### boolean shouldComponentUpdate(object nextProps, object nextState)-### componentWillUpdate(object nextProps, object nextState)-### ReactComponent render()-### componentDidUpdate(object prevProps, object prevState, DOMElement domNode)-### componentWillUnmount()--These are overridable lifecycle methods; see the [lifecycle methods](lifecycle.html) documentation for more information.+```javascript+object getInitialState()+componentWillMount()+componentDidMount(DOMElement domNode)+componentWillReceiveProps(object nextProps)+boolean shouldComponentUpdate(object nextProps, object nextState)+componentWillUpdate(object nextProps, object nextState)+ReactComponent render()+componentDidUpdate(object prevProps, object prevState, DOMElement domNode)+componentWillUnmount()+```++See the [advanced components](advanced-components.html) documentation for more details on these lifecycle methods.,",
                    "removals": 23,
                    "status": "\"modified, \""
                },
                "commit_message": "[docs] Clean up formatting on /api.html",
                "commit_sha": "b416760df05dcbf10f0283268e23e5279232de88"
            }
        },
        "comments": {}
    },
    "7": {
        "body": "Whenever you have a spare moment =]",
        "closed": "05/29/13, 09:01:26 PM",
        "num_comments": 0,
        "title": "Missed a link in README.md",
        "userid": "706406",
        "userlogin": "jeffreylin",
        "pr": {
            "pr_merged": true,
            "commit": {
                "commit_author_name": "Jeffrey Lin",
                "committer": "Jeffrey Lin",
                "commit_date": "05/29/13, 08:54:16 PM",
                "commit_files": {
                    "file_list": [
                        "README.md"
                    ],
                    "additions": 1,
                    "changes": 2,
                    "patch_text": "@@ -28,7 +28,7 @@ React.renderComponent(  This example will render \"Hello John\" into a container on the page. -You'll notice that we used an XML-like syntax; [we call it JSX](http://facebook.github.io/docs/syntax.html). JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML. A simple transform is included with React that allows converting JSX into native JavaScript for browsers to digest.+You'll notice that we used an XML-like syntax; [we call it JSX](http://facebook.github.io/react/docs/syntax.html). JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML. A simple transform is included with React that allows converting JSX into native JavaScript for browsers to digest.  ## Installation ,",
                    "removals": 1,
                    "status": "\"modified, \""
                },
                "commit_message": "Missed a link in README.md",
                "commit_sha": "8b345655990f1e889a13614e7acc20cf533adeb1"
            }
        },
        "comments": {}
    },
    "8": {
        "body": "Nan",
        "closed": "05/29/13, 09:06:45 PM",
        "num_comments": 0,
        "title": "[website] Add Google Analytics.",
        "userid": "55161",
        "userlogin": "yungsters",
        "pr": {
            "pr_merged": true,
            "commit": {
                "commit_author_name": "yungsters",
                "committer": "yungsters",
                "commit_date": "05/29/13, 09:01:23 PM",
                "commit_files": {
                    "file_list": [
                        "docs/_layouts/default.html"
                    ],
                    "additions": 8,
                    "changes": 8,
                    "patch_text": "@@ -70,6 +70,14 @@       <div class=\"right\">&copy; 2013 Facebook Inc.</div>     </footer>   </div>+  <script>+    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){+    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),+    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)+    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');+    ga('create', 'UA-41298772-1', 'facebook.github.io');+    ga('send', 'pageview');+  </script> </body> </html> ,",
                    "removals": 0,
                    "status": "\"modified, \""
                },
                "commit_message": "[website] Add Google Analytics.",
                "commit_sha": "eaae75991bafc172ce10627fbbb5661274d7ee29"
            }
        },
        "comments": {}
    },
    "9": {
        "body": "Nan",
        "closed": "05/29/13, 11:40:09 PM",
        "num_comments": 3,
        "title": "Fix minor typo error",
        "userid": "461021",
        "userlogin": "christianroman",
        "pr": {
            "pr_merged": true,
            "commit": {
                "commit_author_name": "Christian Roman",
                "committer": "Christian Roman",
                "commit_date": "05/29/13, 11:16:52 PM",
                "commit_files": {
                    "file_list": [
                        "docs/docs/component-data.md"
                    ],
                    "additions": 1,
                    "changes": 2,
                    "patch_text": "@@ -130,7 +130,7 @@ Now we are done. `LikeApp` renders an unliked link which, when clicked, will: 4. Trigger an update to the DOM.  It's worth noting that React will handle new return values of `render()` by-making the mininal set of mutations necessary to bring the DOM up-to-date. In+making the minimal set of mutations necessary to bring the DOM up-to-date. In this case, only the `textContent` of the rendered link will be mutated.  In summary:,",
                    "removals": 1,
                    "status": "\"modified, \""
                },
                "commit_message": "Fix minor typo error",
                "commit_sha": "a8866ab824ae9697a5c67c6173d6cb889c50a1a3"
            }
        },
        "comments": {
            "0": {
                "body": "Nice catch! This is what happens when we're all on little sleep. For now we need all contributors to have a CLA on file. I didn't find one for you so I just need to make sure that you've done that at https://developers.facebook.com/opensource/cla. Let me know when it's done and I'll merge this in. Thanks a lot!",
                "userid": "8445",
                "userlogin": "zpao"
            },
            "1": {
                "body": "It's done, I signed the CLA",
                "userid": "461021",
                "userlogin": "christianroman"
            },
            "2": {
                "body": "Awesome. Thanks again!",
                "userid": "8445",
                "userlogin": "zpao"
            }
        }
    },
    "10": {
        "body": "I'm trying to programatically invoke the JSX transformer (using the version of `react-tools` in the npm registry) by running something like```require('react-tools').transform(someCode);```Which then throws this error:```Error: Cannot find module './build/React'```If I comment out the lines in `main.js` that require/use `./build/React` the `react-tools` module loads fine and the transformer runs correctly.",
        "closed": "05/30/13, 12:14:18 PM",
        "num_comments": 3,
        "title": "Can't require() react-tools module",
        "userid": "408825",
        "userlogin": "jriecken",
        "comments": {
            "0": {
                "body": "Bah, I changed build filenames last minute and didn't properly test the module after :( Thanks for finding this! I guess we should write some tests for the node module too, not just our phantomjs tests.(Very) Short term, you should be able to change `./build/React` to `./build/react` and that will fix the problem.@benjamn - I guess it's time to figure out what we want to do with npm versions vs library versions. Should we just bump them both for the time being?",
                "userid": "8445",
                "userlogin": "zpao"
            },
            "1": {
                "body": "Nope, that alone won't do it, we're not even packaging. I totally screwed up the node module :( Fix soon!",
                "userid": "8445",
                "userlogin": "zpao"
            },
            "2": {
                "body": "Yeah, doesn't look like there's even a `build` directory there. :)",
                "userid": "408825",
                "userlogin": "jriecken"
            }
        }
    }
}